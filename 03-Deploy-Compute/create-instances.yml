---
- name: Create VPC HashiStack instances 
  hosts: localhost
  vars_files: 
    - ../vars.yml
  collections:
   - ibm.cloudcollection
  tasks:

    - name: Create HashiStack Security group 
      ibm_is_security_group:
        name: "{{ name_prefix }}-hashi-sg"
        state: available
        vpc: "{{ vpc.id }}"
        resource_group: "{{ resourcegroup }}"
        tags: 
          - "owner:ryantiffany"
          - "deployedwith:ansible"
      register: hashi_sg_create_output

    - name: Save HashiStack Security group as fact
      set_fact:
        cacheable: True
        hashi_sg: "{{ hashi_sg_create_output.resource }}"

    - name: Configure Security Group Rules for bastion access
      ibm_is_security_group_rule:
        state: available
        group: "{{ hashi_sg.id }}"
        direction: inbound
        remote: "{{ bastion_sg.id }}"
        tcp:
          - port_max: 22
            port_min: 22
      register: ssh_from_bastion_sg_rule

    - name: Configure Security Group Rules for Consul TCP ports
      ibm_is_security_group_rule:
        state: available
        group: "{{ hashi_sg.id }}"
        direction: inbound
        remote: 0.0.0.0/0
        tcp:
          - port_max: "{{ item }}"
            port_min: "{{ item }}"
      loop:
        - 6500
        - 8500
        - 8300
        - 8301
        - 8302
      register: consul_tcp_sg_rule

    - name: Configure Security Group Rules for Consul UDP ports
      ibm_is_security_group_rule:
        state: available
        group: "{{ hashi_sg.id }}"
        direction: inbound
        remote: 0.0.0.0/0
        udp:
          - port_max: "{{ item }}"
            port_min: "{{ item }}"
      loop:
        - 6500
        - 8301  
        - 8302
      run_once: True
      register: consul_udp_sg_rule

    - name: Configure Security Group Rules for Vault TCP ports
      ibm_is_security_group_rule:
        state: available
        group: "{{ hashi_sg.id }}"
        direction: inbound
        remote:  0.0.0.0/0
        tcp:
          - port_max: "{{ item }}"
            port_min: "{{ item }}"
      loop:
        - 8200
        - 8201
      register: vault_tcp_sg_rule

    - name: Configure all outbound security group rule
      ibm_is_security_group_rule:
        state: available
        group: "{{ hashi_sg.id }}"
        direction: outbound
        remote: 0.0.0.0/0
      register: hashi_all_out_sg_rule

    - name: Create Hashistack Instance template
      ibm_is_instance_template:
        name: "{{ name_prefix }}-hashi-template"
        state: available
        id: "{{ hashi_template.id | default(omit) }}"
        vpc: "{{ vpc.id }}"
        profile: "{{ instance_profile }}"
        image: "{{ image.id }}"
        user_data: ../user.yml
        keys:
          - "{{ sshkey.resource['id'] }}"
        primary_network_interface:
          - subnet: "{{ subnet.id }}"
            security_groups: 
              - "{{ bastion_sg.id }}"
              - "{{ hashi_sg.id }}"
        zone: "{{ zones[0] }}"
        resource_group: "{{ resourcegroup }}"
      register: hashi_template_create_output

    - name: Save Hashistack Template as fact
      set_fact:
        cacheable: True
        hashitemplate: "{{ hashi_template_create_output.resource }}"

    - name: Create Hashistack Instance Group
      ibm_is_instance_group:
        name: "{{ name_prefix }}-hashi-instance"
        state: available
        id: "{{ hashi_group.id | default(omit) }}"
        instance_template: "{{ hashi_template_create_output.resource['id'] }}"
        instance_count: 3
        subnets: "{{ subnet.id }}"
        resource_group: "{{ resourcegroup }}"
        tags: 
          - "owner:ryantiffany"
          - "deployedwith:ansible"
      register: hashi_group

    - name: Save Hashistack Group as fact
      set_fact:
        cacheable: True
        hashi_group: "{{ hashi_group.resource }}"

    - name: Look at output 
      debug:
        msg: "{{ hashi_group }}"


    # - name: Add Bastion to Ansible inventory
    # - add_host:
    #     name: "{{ item }}"
    #     group: guests
    #   changed_when: false
    #   loop: "{{ hashi_group.resource | map('extract', hostvars, 'result_virsh') | map(attribute='stdout_lines') | flatten }}"

# - name: Check Ansible connection to new Bastion Instance
#   hosts: landingzone
#   gather_facts: False
#   tasks:
#     - name: Wait for VSI to become reachable over SSH
#       wait_for_connection:

# - name: Check Ansible connection to new DEMO VSI
#   hosts: landingzone
#   tasks:
#     - name: Collect OS information
#       command: cat /etc/os-release
#       register: os_info

#     - name: Print OS information
#       debug:
#         var: os_info.stdout_lines
